{"version":3,"sources":["SafeModal/SafeModal.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["getModalOffset","triggerRect","offset","left","window","innerWidth","right","down","top","innerHeight","bottom","width","SafeModal","itemRef","children","isDisplayed","console","log","modalOffset","current","getBoundingClientRect","style","display","position","zIndex","App","ref","useRef","useState","isModaled","setModaled","className","onClick","height","background","border","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"kUAQaA,EAAiB,SAACC,EAAuBC,GAElD,IAAMC,EAAQF,EAAYE,KAASC,OAAOC,WAAaJ,EAAYK,MAC7DC,EAAQN,EAAYO,IAAQJ,OAAOK,YAAcR,EAAYS,OAEnE,OAAO,2BACAP,EAAO,CACNG,MAAQF,OAAOC,WAAaJ,EAAYE,KAAOD,GAC/C,CACAC,KAAOF,EAAYE,KAAOF,EAAYU,MAAQT,IAE/CK,EAAO,CACNC,IAAMP,EAAYS,OAASR,GAC3B,CACAQ,OAAUN,OAAOK,YAAcR,EAAYO,IAAMN,KAoBhDU,EAAkC,SAAC,GAA+C,IAA9CC,EAA6C,EAA7CA,QAA6C,IAApCX,cAAoC,MAA7B,EAA6B,EAA1BY,EAA0B,EAA1BA,SAAUC,EAAgB,EAAhBA,YAE1EC,QAAQC,IAAIJ,GAEZ,IAAMK,EAKFL,GAAWA,EAAQM,QAAUnB,EAAea,EAAQM,QAAQC,wBAAyBlB,GAC/D,CACEC,KAAO,MACPK,IAAM,OAGlC,OACI,mCACKO,GAAe,qBAAKM,MAAK,yBACtBC,QAAS,QACTC,SAAW,SACRL,GAHmB,IAItBM,OAAQ,MAJI,SAMXV,OC3BFW,MAjCf,WAEE,IAAMC,EAAMC,iBAAuB,MAFtB,EAGmBC,oBAAS,GAH5B,mBAGNC,EAHM,KAGKC,EAHL,KAKb,OACE,sBAAKC,UAAU,MAAf,UACI,qBACAC,QAAS,WACPF,GAAYD,IAEdH,IAAKA,EACLL,MAAO,CACLY,OAAS,QACTtB,MAAQ,QACRuB,WAAa,UAIf,cAAC,EAAD,CACArB,QAASa,EACTX,YAAac,EAFb,SAIE,qBAAKR,MAAO,CACVc,OAAS,kBADX,yBCdKC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.2f2ba808.chunk.js","sourcesContent":["import React, {FC, Ref, MutableRefObject} from 'react';\n\n/**\n * Gets a the appropriate position for a modal.\n * @param triggerRect \n * @param offset \n * @returns \n */\nexport const getModalOffset = (triggerRect : DOMRect, offset : number)=>{\n\n    const left = (triggerRect.left) > (window.innerWidth - triggerRect.right) \n    const down = (triggerRect.top) < (window.innerHeight - triggerRect.bottom)\n\n    return {\n        ...left ? {\n            right : window.innerWidth - triggerRect.left - offset,\n        } : {\n            left : triggerRect.left + triggerRect.width + offset,\n        },\n        ...down ? {\n            top : triggerRect.bottom + offset,\n        } : {\n            bottom :  window.innerHeight - triggerRect.top - offset\n        }\n    }\n    \n}\n\n/**\n * \n */\nexport type SafeModalProps = {\n    itemRef : MutableRefObject<HTMLElement|null>,\n    offset? : number,\n    isDisplayed: boolean\n}\n\n/**\n * \n * @param param0 \n * @returns \n */\nexport const SafeModal : FC<SafeModalProps>  = ({itemRef, offset=5, children, isDisplayed}) =>{\n\n    console.log(itemRef);\n\n    const modalOffset : {\n        left? : React.CSSProperties[\"left\"],\n        top? : React.CSSProperties[\"top\"],\n        right? : React.CSSProperties[\"right\"],\n        bottom? : React.CSSProperties[\"bottom\"]\n    } = itemRef && itemRef.current ? getModalOffset(itemRef.current.getBoundingClientRect(), offset)\n                            : {\n                                left : \"25%\",\n                                top : \"25%\"\n                            }\n\n    return (\n        <>\n            {isDisplayed && <div style={{\n                display: \"block\",\n                position : \"fixed\",\n                ...modalOffset,\n                zIndex: 1000\n            }}>\n                {children}\n            </div>}\n        </>\n    )\n\n}","import React, { useRef, RefObject, useState } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport { SafeModal } from './SafeModal';\n\nfunction App() {\n\n  const ref = useRef<HTMLDivElement>(null);\n  const [isModaled, setModaled] = useState(false);\n\n  return (\n    <div className=\"App\">\n        <div \n        onClick={()=>{\n          setModaled(!isModaled);\n        }}\n        ref={ref}\n        style={{\n          height : \"100px\",\n          width : \"100px\",\n          background : \"pink\"\n        }}>\n\n        </div>\n        <SafeModal\n        itemRef={ref}\n        isDisplayed={isModaled}\n        >\n          <div style={{\n            border : \"1px solid blue\"\n          }}>\n            Hello\n          </div>\n        </SafeModal>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n\n// package exports\nexport * from \"./SafeModal\";\n"],"sourceRoot":""}